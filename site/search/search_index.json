{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introductions to Anomeda \"Why has the number of visits of our website decreased this week? Who are the users who caused that?\" - anomeda will help to answer such questions quicklya and easily. anomeda is a Python library developed for Data Analysts, Data Scientists, BI Analysts and others. It helps to identify important metric changes and quickly find clusters in data which changed the trend of the metric or caused the anomaly. Installing The GitHub repo contains the source distribution and built distribution files in dist folder. You must have pandas , numpy , sklearn , scipy installed. How to use After the library is installed, you can pass the pandas.DataFrame object with events to anomeda and look for insights about the metric's behavior. Create an anomeda.DataFrame object The base object anomeda is working with is the DataFrame. It is based on pandas.DataFrame object which contains events represented by rows or time series (aggregated events). It may contain: - Index - Usually a datetime of a corresponding event - Measures - Columns which describes an event, like \"country\", \"region\", \"client category\", etc. Measures can be numerical and categorical - Metric - Metric you want to track, can be either aggregated, like \"count of visits in a period\", or non-aggregated, like \"fact of visit\" anmd_df = anomeda.DataFrame( data, # pandas.DataFrame measures_names=['dummy_measure', 'dummy_numeric_measure'], # columns represending measures measures_types={ 'categorical': ['dummy_measure'], 'continuous': ['dummy_numeric_measure'] }, index_name='dt', metric_name='metric', agg_func='sum' # function that is used to aggregate metric if more than 1 metric value will be found for a particular set of measure values ) Each of the parameters can be changed with corresponding method, like anomeda.DataFrame.set_measures_names , anomeda.DataFrame.set_measures_types , anomeda.DataFrame.set_index_name , etc. The parameters can be retrieved with a corresponding getter, like anomeda.DataFrame.get_measures_names , anomeda.DataFrame.get_measures_types , anomeda.DataFrame.get_index_name , etc. The underlying pandas.DataFrame object can be changed without creating a new instance of anomeda.DataFrame with mod_data method. IF you need to get the pandas.DataFrame representation of an object, you can use aspandas method. Discretization of numeric measures When continuous measures are passed, they will be mapped to discrete values by sklearn.mixture.BayesianGaussianMixture by default. You can pass your own discrete values of continuous measure when creating an anomeda.DataFrame object (see discretized_measures parameter of anomeda.DataFrame constructor) or later on (see method anomeda.DataFrame.set_discretized_measures ) If you need to see the discretized values, you can use anomeda.DataFrame.get_discretization_mapping method Find an anomaly change of the metric anomeda.find_anomalies and anomeda.find_anomalies_by_clusters are responsible for looking for unusual metric changes in the data. First, there are some parameters for the method (see docsctring of the methods for details): n = 3 p = (0.05, 0.95) normal_whole_window = True read_deltas_consequently = False The output is unique and sorted index values and an indication if total metric value is an anomaly or not. The values are aggregated using agg_func parameter. index_values, anomalies_flag = anomeda.find_anomalies(anmd_df, n=n, p=p, normal_whole_window=normal_whole_window, read_deltas_consequently=read_deltas_consequently) The methods use an alghorithm based on analyzing the historical changes of metric values in order to decide if the current point is an anomaly. The parameters mentioned before can tune the method for your needs. Find the root cause of an anomaly change of the metric When you found an unusual period (whether by using anomeda.find_anomalies or by yourself), you can compare it to other period in order to find which events caused the difference between metric values. All you need to do is to call anomeda.explain_values_difference with 2 anomeda.DataFrame objects containing data you want to compare. It will automatically detect clusters of events using measure values, compare the metric values and return the result. anomeda.explain_values_difference( anmd_df1, anmd_df2 The output is a pandas.DataFrame with average metric value in each cluster in both periods and the differences between them. Thus, sorting by the absolute or relative differences and average values, you can find the most important clusters in terms of its contribution to the overall metric's change. Find clusters of events which make your metric rise or decrease Anomeda can calculate trends of the metric for each cluster in your data and show the most significat positive and negative contributions. It aggregates metric values by index, fit a line a * x + b, where x is index numeric value, and produce the output. anomeda.describe_trends_by_clusters(anmd_df) The output is a pandas.DataFrame with the following columns: - Measures - trend_coeff - Coefficient a of a fitted line a * x + b - trend_bias - Coefficient b of a fitted line a * x + b - avg_value - contribution_metric - Coefficient which describes how important the cluster for the total metric is. It is calculated as follows: sign(a) * abs(a * avg_value) , where a is coefficient a of a fitted line a * x + b","title":"Overview"},{"location":"#introductions-to-anomeda","text":"\"Why has the number of visits of our website decreased this week? Who are the users who caused that?\" - anomeda will help to answer such questions quicklya and easily. anomeda is a Python library developed for Data Analysts, Data Scientists, BI Analysts and others. It helps to identify important metric changes and quickly find clusters in data which changed the trend of the metric or caused the anomaly.","title":"Introductions to Anomeda"},{"location":"#installing","text":"The GitHub repo contains the source distribution and built distribution files in dist folder. You must have pandas , numpy , sklearn , scipy installed.","title":"Installing"},{"location":"#how-to-use","text":"After the library is installed, you can pass the pandas.DataFrame object with events to anomeda and look for insights about the metric's behavior.","title":"How to use"},{"location":"#create-an-anomedadataframe-object","text":"The base object anomeda is working with is the DataFrame. It is based on pandas.DataFrame object which contains events represented by rows or time series (aggregated events). It may contain: - Index - Usually a datetime of a corresponding event - Measures - Columns which describes an event, like \"country\", \"region\", \"client category\", etc. Measures can be numerical and categorical - Metric - Metric you want to track, can be either aggregated, like \"count of visits in a period\", or non-aggregated, like \"fact of visit\" anmd_df = anomeda.DataFrame( data, # pandas.DataFrame measures_names=['dummy_measure', 'dummy_numeric_measure'], # columns represending measures measures_types={ 'categorical': ['dummy_measure'], 'continuous': ['dummy_numeric_measure'] }, index_name='dt', metric_name='metric', agg_func='sum' # function that is used to aggregate metric if more than 1 metric value will be found for a particular set of measure values ) Each of the parameters can be changed with corresponding method, like anomeda.DataFrame.set_measures_names , anomeda.DataFrame.set_measures_types , anomeda.DataFrame.set_index_name , etc. The parameters can be retrieved with a corresponding getter, like anomeda.DataFrame.get_measures_names , anomeda.DataFrame.get_measures_types , anomeda.DataFrame.get_index_name , etc. The underlying pandas.DataFrame object can be changed without creating a new instance of anomeda.DataFrame with mod_data method. IF you need to get the pandas.DataFrame representation of an object, you can use aspandas method.","title":"Create an anomeda.DataFrame object"},{"location":"#discretization-of-numeric-measures","text":"When continuous measures are passed, they will be mapped to discrete values by sklearn.mixture.BayesianGaussianMixture by default. You can pass your own discrete values of continuous measure when creating an anomeda.DataFrame object (see discretized_measures parameter of anomeda.DataFrame constructor) or later on (see method anomeda.DataFrame.set_discretized_measures ) If you need to see the discretized values, you can use anomeda.DataFrame.get_discretization_mapping method","title":"Discretization of numeric measures"},{"location":"#find-an-anomaly-change-of-the-metric","text":"anomeda.find_anomalies and anomeda.find_anomalies_by_clusters are responsible for looking for unusual metric changes in the data. First, there are some parameters for the method (see docsctring of the methods for details): n = 3 p = (0.05, 0.95) normal_whole_window = True read_deltas_consequently = False The output is unique and sorted index values and an indication if total metric value is an anomaly or not. The values are aggregated using agg_func parameter. index_values, anomalies_flag = anomeda.find_anomalies(anmd_df, n=n, p=p, normal_whole_window=normal_whole_window, read_deltas_consequently=read_deltas_consequently) The methods use an alghorithm based on analyzing the historical changes of metric values in order to decide if the current point is an anomaly. The parameters mentioned before can tune the method for your needs.","title":"Find an anomaly change of the metric"},{"location":"#find-the-root-cause-of-an-anomaly-change-of-the-metric","text":"When you found an unusual period (whether by using anomeda.find_anomalies or by yourself), you can compare it to other period in order to find which events caused the difference between metric values. All you need to do is to call anomeda.explain_values_difference with 2 anomeda.DataFrame objects containing data you want to compare. It will automatically detect clusters of events using measure values, compare the metric values and return the result. anomeda.explain_values_difference( anmd_df1, anmd_df2 The output is a pandas.DataFrame with average metric value in each cluster in both periods and the differences between them. Thus, sorting by the absolute or relative differences and average values, you can find the most important clusters in terms of its contribution to the overall metric's change.","title":"Find the root cause of an anomaly change of the metric"},{"location":"#find-clusters-of-events-which-make-your-metric-rise-or-decrease","text":"Anomeda can calculate trends of the metric for each cluster in your data and show the most significat positive and negative contributions. It aggregates metric values by index, fit a line a * x + b, where x is index numeric value, and produce the output. anomeda.describe_trends_by_clusters(anmd_df) The output is a pandas.DataFrame with the following columns: - Measures - trend_coeff - Coefficient a of a fitted line a * x + b - trend_bias - Coefficient b of a fitted line a * x + b - avg_value - contribution_metric - Coefficient which describes how important the cluster for the total metric is. It is calculated as follows: sign(a) * abs(a * avg_value) , where a is coefficient a of a fitted line a * x + b","title":"Find clusters of events which make your metric rise or decrease"},{"location":"api_reference/","text":"API reference Here you can find the documentation for all available endpoints of anomeda Python package. anomeda . DataFrame . DataFrame ( data : pd . DataFrame , measures_names = None , measures_types = None , discretized_measures = None , index_name = None , metric_name = None , agg_func = 'sum' ) Class containing data to be processed by anomeda library Parameters data : pandas.DataFrame Underlying data must be pandas.DataFrame object list of str or tuple objects List containing columns considered as measures in the data dict Dict containing 'categorical' and/or 'continuous' keys and list of measures as values. Continuous measures will be discretized automatically if not presented in discretized_measures parameter. dict Dict containig name of the measure as key and array-like object containing discretized values of the measure of the same shape as original data. If measure is in 'continuous' list of measures_types parameter, it will be discretized automatically. str or list Columns to be considered as an index (usually a date or a timestamp) str Column with a metric to be analyzed str Way of aggregating metric_name by measures. Can be 'sum', 'avg' or callable compatible with pandas.DataFrame.groupby Example anmd_df = anomeda.DataFrame( data, measures_names=['class', 'dummy_measure', 'dummy_numeric_measure'], measures_types={ 'categorical': ['class', 'dummy_measure'], 'continuous': ['dummy_numeric_measure'] }, index_name='dt', metric_name='metric', agg_func='sum' ) __copy__ () aspandas () Return a copy of a pandas.DataFrame object underlying the anomeda.DataFrame copy () Return a copy of an anomeda.DataFrame object get_agg_func () Return the function used for aggregating metric by measures get_discretization_mapping () Return a dict with a mapping between discrete values and actual ranges of continous measures. In some cases, there may be more than one interval for each discrete values Example anmd_df.get_discretization_mapping() Will return { 'dummy_numeric_measure': { 0: [[0.08506988648110014, 0.982366623262143]], 1: [[0.9855150328648835, 2.458970726947438]] } } get_discretized_measures () Return discretized versions of continous measures used in the object get_index_name () Return the name of an index column get_measures_names () Return a list of columns considered as measures get_measures_types () Return the measures_types dict get_metric_name () Return the name of a metric column mod_data ( data : pd . DataFrame , inplace = False ) Replace the pandas.DataFrame object underlying the anomeda.DataFrame with a new one Parameters data : pandas.DataFrame A new data object bool If True, then no new object will be returned. Otherwise, create and return a new anomeda.DataFrame set_agg_func ( agg_func : str ) Set a function for aggregating metric by measures Parameters agg_func : str, callable Can be either 'sum', 'avg' or callable compatible with pandas.DataFrame.groupby set_discretization_mapping ( discretized_measures_mapping ) Set custom thresholds for discretization mapping Parameters discretized_measures_mapping : dict Dict in format: { 'measure_name': { discrete_value: [[t1, t2], [t3, t4], ...], ... }, ... } Example anmd_df.set_discretization_mapping({ 'dummy_numeric_measure': { 0: [[0.01, 0.98]], 1: [[0.99, 2.45]] } }) set_discretized_measures ( discretized_measures : dict ) Set custom discretization for continous measures Parameters discretized_measures : dict Dict containing discrete values of each measure in the format {'measure_name': [0, 1, 1, ...]}. Array of values must have same shape as original measure had. set_index_name ( index_name ) Set a name of an index column Parameters index_name : str or list Column name or list of columns names containing index values. Must be present in an underling pandas.DataFrame object. If index is currenly present in measures list, you need to change the measures list first set_measures_names ( measures_names ) Let anomeda.DataFrame object know what columns are measures. Columns are picked from an underlying pandas.DataFrame object, so they must be present there. Parameters measures_names : list of str List containing columns which will be considered as measures set_measures_types ( measures_types : dict ) Set measures types. measure can be either 'categorical' or 'continous'. Types are used to clusterize the data properly. Parameters measures_types : dict Dict containing 'continous' and/or 'categorical' keys and lists of measures as values Example anmd_df.set_measures_types({ 'continous': ['numeric_measure_1'], 'categorical': ['measure_1'] }) set_metric_name ( metric_name ) Set the name of a metric to be analyzed Parameters metric_name : str Must be present among columns of an underlying pandas.DataFrame. If metric column is currently set as a measure, you need to change the list of measures first","title":"Docs"},{"location":"api_reference/#api-reference","text":"Here you can find the documentation for all available endpoints of anomeda Python package.","title":"API reference"},{"location":"api_reference/#anomeda.DataFrame.DataFrame","text":"Class containing data to be processed by anomeda library","title":"DataFrame"},{"location":"api_reference/#anomeda.DataFrame.DataFrame--parameters","text":"data : pandas.DataFrame Underlying data must be pandas.DataFrame object list of str or tuple objects List containing columns considered as measures in the data dict Dict containing 'categorical' and/or 'continuous' keys and list of measures as values. Continuous measures will be discretized automatically if not presented in discretized_measures parameter. dict Dict containig name of the measure as key and array-like object containing discretized values of the measure of the same shape as original data. If measure is in 'continuous' list of measures_types parameter, it will be discretized automatically. str or list Columns to be considered as an index (usually a date or a timestamp) str Column with a metric to be analyzed str Way of aggregating metric_name by measures. Can be 'sum', 'avg' or callable compatible with pandas.DataFrame.groupby","title":"Parameters"},{"location":"api_reference/#anomeda.DataFrame.DataFrame--example","text":"anmd_df = anomeda.DataFrame( data, measures_names=['class', 'dummy_measure', 'dummy_numeric_measure'], measures_types={ 'categorical': ['class', 'dummy_measure'], 'continuous': ['dummy_numeric_measure'] }, index_name='dt', metric_name='metric', agg_func='sum' )","title":"Example"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.__copy__","text":"","title":"__copy__()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.aspandas","text":"Return a copy of a pandas.DataFrame object underlying the anomeda.DataFrame","title":"aspandas()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.copy","text":"Return a copy of an anomeda.DataFrame object","title":"copy()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.get_agg_func","text":"Return the function used for aggregating metric by measures","title":"get_agg_func()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.get_discretization_mapping","text":"Return a dict with a mapping between discrete values and actual ranges of continous measures. In some cases, there may be more than one interval for each discrete values","title":"get_discretization_mapping()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.get_discretization_mapping--example","text":"anmd_df.get_discretization_mapping() Will return { 'dummy_numeric_measure': { 0: [[0.08506988648110014, 0.982366623262143]], 1: [[0.9855150328648835, 2.458970726947438]] } }","title":"Example"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.get_discretized_measures","text":"Return discretized versions of continous measures used in the object","title":"get_discretized_measures()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.get_index_name","text":"Return the name of an index column","title":"get_index_name()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.get_measures_names","text":"Return a list of columns considered as measures","title":"get_measures_names()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.get_measures_types","text":"Return the measures_types dict","title":"get_measures_types()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.get_metric_name","text":"Return the name of a metric column","title":"get_metric_name()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.mod_data","text":"Replace the pandas.DataFrame object underlying the anomeda.DataFrame with a new one","title":"mod_data()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.mod_data--parameters","text":"data : pandas.DataFrame A new data object bool If True, then no new object will be returned. Otherwise, create and return a new anomeda.DataFrame","title":"Parameters"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.set_agg_func","text":"Set a function for aggregating metric by measures","title":"set_agg_func()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.set_agg_func--parameters","text":"agg_func : str, callable Can be either 'sum', 'avg' or callable compatible with pandas.DataFrame.groupby","title":"Parameters"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.set_discretization_mapping","text":"Set custom thresholds for discretization mapping","title":"set_discretization_mapping()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.set_discretization_mapping--parameters","text":"discretized_measures_mapping : dict Dict in format: { 'measure_name': { discrete_value: [[t1, t2], [t3, t4], ...], ... }, ... }","title":"Parameters"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.set_discretization_mapping--example","text":"anmd_df.set_discretization_mapping({ 'dummy_numeric_measure': { 0: [[0.01, 0.98]], 1: [[0.99, 2.45]] } })","title":"Example"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.set_discretized_measures","text":"Set custom discretization for continous measures","title":"set_discretized_measures()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.set_discretized_measures--parameters","text":"discretized_measures : dict Dict containing discrete values of each measure in the format {'measure_name': [0, 1, 1, ...]}. Array of values must have same shape as original measure had.","title":"Parameters"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.set_index_name","text":"Set a name of an index column","title":"set_index_name()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.set_index_name--parameters","text":"index_name : str or list Column name or list of columns names containing index values. Must be present in an underling pandas.DataFrame object. If index is currenly present in measures list, you need to change the measures list first","title":"Parameters"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.set_measures_names","text":"Let anomeda.DataFrame object know what columns are measures. Columns are picked from an underlying pandas.DataFrame object, so they must be present there.","title":"set_measures_names()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.set_measures_names--parameters","text":"measures_names : list of str List containing columns which will be considered as measures","title":"Parameters"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.set_measures_types","text":"Set measures types. measure can be either 'categorical' or 'continous'. Types are used to clusterize the data properly.","title":"set_measures_types()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.set_measures_types--parameters","text":"measures_types : dict Dict containing 'continous' and/or 'categorical' keys and lists of measures as values","title":"Parameters"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.set_measures_types--example","text":"anmd_df.set_measures_types({ 'continous': ['numeric_measure_1'], 'categorical': ['measure_1'] })","title":"Example"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.set_metric_name","text":"Set the name of a metric to be analyzed","title":"set_metric_name()"},{"location":"api_reference/#anomeda.DataFrame.DataFrame.set_metric_name--parameters","text":"metric_name : str Must be present among columns of an underlying pandas.DataFrame. If metric column is currently set as a measure, you need to change the list of measures first","title":"Parameters"},{"location":"user_guide/","text":"Sample Header Here is coming the documentation for anomeda","title":"User Guide"},{"location":"user_guide/#sample-header","text":"Here is coming the documentation for anomeda","title":"Sample Header"}]}